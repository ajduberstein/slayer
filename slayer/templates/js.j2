{{ viewport }};

var layers = [];

function getLayers() {
  return [
    {{ layers }}
  ];
}


{% if blend %}

const GL = {
  ZERO: 0,
  ONE: 1,
  SRC_COLOR: 0x0300,
  ONE_MINUS_SRC_COLOR: 0x0301,
  SRC_ALPHA: 0x0302,
  ONE_MINUS_SRC_ALPHA: 0x0303,
  DST_ALPHA: 0x0304,
  ONE_MINUS_DST_ALPHA: 0x0305,
  DST_COLOR: 0x0306,
  ONE_MINUS_DST_COLOR: 0x0307,
  SRC_ALPHA_SATURATE: 0x0308,
  CONSTANT_COLOR: 0x8001,
  ONE_MINUS_CONSTANT_COLOR: 0x8002,
  CONSTANT_ALPHA: 0x8003,
  DEPTH_TEST: 0x0B71,
  ONE_MINUS_CONSTANT_ALPHA: 0x8004,
  FUNC_ADD: 0x8006,
  BLEND: 0x0BE2,
  FUNC_SUBTRACT: 0x800A,
  FUNC_REVERSE_SUBTRACT: 0x800B,
};

// https://github.com/uber/kepler.gl/blob/b6380f21fe8243db6bbf72e74762e3fc7224665b/src/constants/default-settings.js#L482
function webGLInit(gl) {
  gl.disable(GL.DEPTH_TEST);
  gl.getExtension('OES_element_index_uint');
  gl.enable(GL.BLEND);
  gl.blendFunc(GL.SRC_ALPHA, GL.DST_ALPHA);
  gl.blendEquation(GL.FUNC_ADD);
}
{% endif %}

var deckgl = new deck.DeckGL({
  container: 'container',
  mapboxApiAccessToken: '{{ mapbox_api_key }}',
  viewState: INITIAL_VIEWPORT_STATE,
  controller: deck.MapController,
  onViewportChange: onViewportChange,
{% if blend %}
  onWebGLInitialized: webGLInit || None,
{% endif %}
  layers: layers
});

function onViewportChange(viewport) {
  deckgl.setProps({viewState: viewport});
}

function init() {
  layers = getLayers();
  deckgl.setProps({layers});
}

init();
